{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/2022-08-22/",
    "result": {"data":{"cur":{"id":"8067d190-7cac-5cae-8b0e-ff9ee547f6d6","html":"<h3 id=\"jsonstringify\" style=\"position:relative;\"><a href=\"#jsonstringify\" aria-label=\"jsonstringify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Json.stringify</h3>\n<ul>\n<li><code class=\"language-text\">JSON.stringify</code> : 객체를 JSON으로 변환한다.</li>\n</ul>\n<p>JSON으로 변환된 객체의 타입은 문자열이다.</p>\n<ul>\n<li><code class=\"language-text\">JSON.parse</code> : JSON을 객체로 변환한다.</li>\n</ul>\n<h3 id=\"json의-기본-규칙\" style=\"position:relative;\"><a href=\"#json%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99\" aria-label=\"json의 기본 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON의 기본 규칙</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>자바스크립트 객체</th>\n<th>JSON</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>키</td>\n<td>키는 따옴표 없이 쓸 수 있음 <br> <code class=\"language-text\">{ key : \"property\" }</code></td>\n<td>반드시 쌍따옴표를 붙여야 함 <br> <code class=\"language-text\">'{\"key\":\"property\"}'</code></td>\n</tr>\n<tr>\n<td>문자열 값</td>\n<td>작은따옴표도 사용 가능 <br> <code class=\"language-text\">{ \"key\" : 'property' }</code></td>\n<td>반드시 큰따옴표로 감싸야 함 <br> <code class=\"language-text\">'{\"key\":\"property\"}'</code></td>\n</tr>\n<tr>\n<td>키와 값 사이 공백</td>\n<td>사용 가능 <br> <code class=\"language-text\">{\"key\" : 'property'}</code></td>\n<td>사용 불가능 <br> <code class=\"language-text\">'{\"key\":\"property\"}'</code></td>\n</tr>\n<tr>\n<td>키-값 쌍 사이 공백</td>\n<td>사용 가능 <br> <code class=\"language-text\">{ \"key\":'property', num:1 }</code></td>\n<td>사용 불가능 <br> <code class=\"language-text\">'{\"key\":\"property\",\"num\":1}'</code></td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"stringifyjson\" style=\"position:relative;\"><a href=\"#stringifyjson\" aria-label=\"stringifyjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stringifyJSON</h3>\n<h4 id=\"stringifyjsonjs\" style=\"position:relative;\"><a href=\"#stringifyjsonjs\" aria-label=\"stringifyjsonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stringifyJSON.js</h4>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">stringifyJSON</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// your code goes here</span>\r\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span>  \r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> el <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n      result <span class=\"token operator\">+=</span> <span class=\"token function\">stringifyJSON</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">','</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span> \r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">continue</span> <span class=\"token comment\">// skip</span>\r\n      <span class=\"token punctuation\">}</span>\r\n      result <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">stringifyJSON</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">stringifyJSON</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span>\r\n    <span class=\"token punctuation\">}</span>\r\n    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">}</span><span class=\"token template-punctuation string\">`</span></span> \r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>초반에 숫자, boolean, 문자열을 문자열로 반환한다. 배열일 때를 보면 <code class=\"language-text\">stringifyJSON(el)</code>로 재귀함수를 호출하고 있다. 재귀함수로 호출하는 이유는 배열 안 요소가 문자열인지 숫자인지 다시 판단할 필요 없다.</p>\n<p>객체일 때도 마찬가지이다. key와 value를 재귀함수로 호출하고 있다.</p>\n<br>\n<h3 id=\"tree-ui\" style=\"position:relative;\"><a href=\"#tree-ui\" aria-label=\"tree ui permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tree UI</h3>\n<p><img src=\"/08bf36ea1cf03db50daeae71ab804958/treeui.png\" alt=\"Chinese Salty Egg\"></p>\n<p>위 사진처럼 자식 노드가 있는 경우, 재귀함수로 반복되는 <code class=\"language-text\">&lt;ul></code> 호출해야한다. 만약 자식 노드가 없는 경우 <code class=\"language-text\">&lt;li></code>에 이름을 넣으면 된다.</p>\n<h4 id=\"fix_mejs\" style=\"position:relative;\"><a href=\"#fix_mejs\" aria-label=\"fix_mejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fix_me.js</h4>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">createTreeView</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">menu<span class=\"token punctuation\">,</span> currentNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\r\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>menu<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// </span>\r\n    <span class=\"token comment\">// 자식 노드가 있는 데이터의 경우</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      input<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"checkbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    \r\n      <span class=\"token keyword\">const</span> span <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      span<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\r\n\r\n      <span class=\"token keyword\">const</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token comment\">// 자식 메뉴가 있다면 재귀 함수 호출</span>\r\n      <span class=\"token function\">createTreeView</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> ul<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      li<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> span<span class=\"token punctuation\">,</span>ul<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      currentNode<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token comment\">//li를 root에 추가</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 자식 노드가 없는 데이터의 경우</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n      li<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name\r\n      currentNode<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span> \r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">createTreeView</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"Json.stringify  : 객체를 JSON으로 변환한다. JSON으로 변환된 객체의 타입은 문자열이다.  : JSON을 객체로 변환한다. JSON의 기본 규칙  자바스크립트 객체 JSON 키 키는 따옴표 없이 쓸 수 있음   반드시 쌍따옴표를 붙여야 함   문자열 값 작은따옴표도 사용 가능   반드시 큰따옴표로 감싸야 함   키와 값 사이 공백 사용 가능   사용 불가능   키-값 쌍 사이 공백 사용 가능   사용 불가능   stringifyJSON stringifyJSON.js 초반에 숫자, boolean, 문자열을 문자열로 반환한다. 배열일 때를 보면 로 재귀함수를 호출하고 있다. 재귀함수로 호출하는 이유는 배열 안 요소가 문자열인지 숫자인지 다시 판단할 필요 없다. 객체일 때도 마찬가지이다. key와 value를 재귀함수로 호출하고 있다. Tree UI Chinese Salty Egg 위 사진처럼 자식 노드가 있는 경우, 재귀함수로 반복되는  호출해야한다. 만약 자식 노…","frontmatter":{"date":"August 22, 2022","title":"Json.stringify","categories":"codestates blog","author":"김예린","emoji":"🔮"},"fields":{"slug":"/2022-08-22/"}},"next":{"id":"fff82cd6-f6bc-528c-b028-7de20f410b69","html":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Cannot read properties <span class=\"token keyword\">of</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">(</span>reading <span class=\"token string\">'split'</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token number\">31</span> <span class=\"token operator\">|</span>\r\n  <span class=\"token number\">32</span> <span class=\"token operator\">|</span>   edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token operator\">></span> <span class=\"token number\">33</span> <span class=\"token operator\">|</span>     <span class=\"token keyword\">const</span> postCategories <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>categories<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n     <span class=\"token operator\">|</span>                                                        <span class=\"token operator\">^</span>\r\n  <span class=\"token number\">34</span> <span class=\"token operator\">|</span>     postCategories<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">category</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> categorySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token number\">35</span> <span class=\"token operator\">|</span>   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token number\">36</span> <span class=\"token operator\">|</span>\r\n\r\nFile<span class=\"token operator\">:</span> gatsby<span class=\"token operator\">-</span>node<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">33</span><span class=\"token operator\">:</span><span class=\"token number\">56</span></code></pre></div>\n<p><code class=\"language-text\">index.md</code>를 생성하고 바로 이런 오류가 났다.</p>\n<p>해결방법:\r\n<code class=\"language-text\">frontmatter</code>에 categories를 추가하면 된다.</p>\n<br>\n<h3 id=\"category\" style=\"position:relative;\"><a href=\"#category\" aria-label=\"category permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>category</h3>\n<p>현재 태그는 활용되고 있지 않으며, 카테고리는 블로그 리스트 하단에 보이고, 카테고리로 포스팅을 검색 가능하게 한다.</p>\n<br>\n<h3 id=\"주의할-점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의할 점</h3>\n<p><code class=\"language-text\">gatsby develop</code>과 <code class=\"language-text\">npm run deploy</code>을 동시에 하면 오류난다.</p>\n<br>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h3>\n<hr>\n<p>공부할 겸 이 블로그 테마에 맞게 블로그를 수정하거나 내가 원하는 기능과 디자인으로 바꿔야겠다.</p>","frontmatter":{"date":"August 21, 2022","title":"Gatsby 테마 바꾸기","categories":"featured blog","author":"김예린","emoji":"👏"},"fields":{"slug":"/zoomcoding_theme/"}},"prev":{"id":"824312cf-9999-5bec-9589-9803a9a94bed","html":"<h3 id=\"시작은-달라도-결국-동일선상에-서-있다\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%EC%9D%80-%EB%8B%AC%EB%9D%BC%EB%8F%84-%EA%B2%B0%EA%B5%AD-%EB%8F%99%EC%9D%BC%EC%84%A0%EC%83%81%EC%97%90-%EC%84%9C-%EC%9E%88%EB%8B%A4\" aria-label=\"시작은 달라도 결국 동일선상에 서 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작은 달라도 결국 동일선상에 서 있다</h3>\n<p>6주동안 알고리즘 소모임이 시작된다. 오늘 OT에서 가장 인상깊었던 말이다. 남들보다 늦게 출발했어도 알고리즘 문제를 열심히 풀다보면 결국 빨리 시작한 사람들과 같은 곳에 있을 것이라는 말이다.</p>\n<br>\n<h3 id=\"1주차-ot\" style=\"position:relative;\"><a href=\"#1%EC%A3%BC%EC%B0%A8-ot\" aria-label=\"1주차 ot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1주차 OT</h3>\n<p>나는 백준 사이트를 처음 사용해보는 것은 아니다. 백준에서는 자바스크립트 언어를 사용하기 위해 node.js 입출력(fs모듈)으로 문제를 풀었었다.</p>\n<h4 id=\"소모임을-참여하게-된-이유\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EB%AA%A8%EC%9E%84%EC%9D%84-%EC%B0%B8%EC%97%AC%ED%95%98%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"소모임을 참여하게 된 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소모임을 참여하게 된 이유</h4>\n<p>일단 다른 사람들과 함께 알고리즘 문제에 대해 소통할 수 있어서 좋았다. 항상 여러가지 풀이 방법이 존재하는데 다른 사람들은 어떻게 풀었는지, 내 답이 베스트인지 등 생각하지 못했던 방법을 발견할 수 있다.</p>\n<h3 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<blockquote>\n<p><strong>fs모듈을 이용하는 방법</strong></p>\n</blockquote>\n<ol>\n<li>한 줄로 입력을 받을 때</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/stdin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"-1\" style=\"position:relative;\"><a href=\"#-1\" aria-label=\" 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol start=\"2\">\n<li>여러 줄로 입력을 받을 때</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/stdin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<blockquote>\n<p><strong>fs모듈을 이용하는 방법(vscode)</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'예제.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">예제.txt</code>파일을 만들고 문제에서 주어진 예제 입력을 그대로 복사해서 저장한다.</p>\n<p>텍스트 파일의 이름은 항상 달라지기 때문에 더 편리한 방법으로 풀 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>\r\nprocess<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">===</span> <span class=\"token string\">\"linux\"</span>\r\n<span class=\"token operator\">?</span> <span class=\"token string\">\"/dev/stdin\"</span>\r\n<span class=\"token operator\">:</span> __filename<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".txt\"</span>\r\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>파일의 이름을 <code class=\"language-text\">slice()</code> 함수로 추출한다. 이렇게 작성하면, 나중에 <code class=\"language-text\">txt</code> 파일을 만들더라도 fs모듈을 수정하지 않고 사용할 수 있다.</p>\n<br>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h3>\n<hr>\n<p>1주차에서는 `단계부터 차근차근 문제를 풀어나가며 node.js 입출력 방법을 익히는 것이 중요할 것 같다. 소모임 스터디를 통해 다른 동기들의 코드를 참고해서 더 클린한 코드를 작성하는 방법을 알고 도움될 만한 알고리즘 블로그를 작성해야 겠다!!!😆😆😆</p>\n<p>현재 <code class=\"language-text\">BackjoonHub</code>라는 크롬 익스텐션을 추가했기 때문에 백준에서 문제를 제출하면 자동으로 깃허브에 자신이 지정한 레퍼지토리로 커밋된다. <del>(아주 편리하다)</del></p>","frontmatter":{"date":"August 23, 2022","title":"알고리즘 학습 소모임 시작","categories":"algorithm blog study","author":"김예린","emoji":"💻"},"fields":{"slug":"/studycafe_algo/"}},"site":{"siteMetadata":{"siteUrl":"https://yelinz515.github.io","comments":{"utterances":{"repo":"yelinz515/blog-comments"}}}}},"pageContext":{"slug":"/2022-08-22/","nextSlug":"/zoomcoding_theme/","prevSlug":"/studycafe_algo/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}