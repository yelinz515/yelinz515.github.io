{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/2022-08-09/",
    "result": {"data":{"cur":{"id":"18ceff07-3fc2-5a97-aa8b-bee5aa77d699","html":"<h3 id=\"react-데이터-흐름\" style=\"position:relative;\"><a href=\"#react-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84\" aria-label=\"react 데이터 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 데이터 흐름</h3>\n<p>페이지를 만들기 이전에, 컴포넌트를 먼저 만들고 조립한다. 상향식으로 앱을 만들면 테스트가 쉽고 확장성이 좋다.</p>\n<h4 id=\"단방향-데이터-흐름one-way-data-flow\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84one-way-data-flow\" aria-label=\"단방향 데이터 흐름one way data flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단방향 데이터 흐름(one-way data flow)</h4>\n<p>상태를 최소화하는 것이 가장 좋으며,</p>\n<h4 id=\"lifting-state--하향식-데이터-흐름top-down-data-flow\" style=\"position:relative;\"><a href=\"#lifting-state--%ED%95%98%ED%96%A5%EC%8B%9D-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84top-down-data-flow\" aria-label=\"lifting state  하향식 데이터 흐름top down data flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lifting state / 하향식 데이터 흐름(Top-down data flow)</h4>\n<p>보통 state는 rendering을 위해서 component에 추가되는데,\r\n만약 다른 component도 함께 state를 필요로하면\r\n그 component들의 공통된 부모 component로 state를 끌어올린다.</p>\n<p>부모 component에서 관리하게 되는것이다. 이것이 하향식 데이터 흐름를 활용하는 방법이다.</p>\n<p><strong>장점 :\r\nbug가 줄고, 관리하는 로직 수정이 쉬움.</strong></p>\n<p>📍 만약 UI에서 잘못된 값이 render 된 부분을 발견한다면\r\n해당 data, 즉 props가 어떠한 부모 component로부터 왔는지\r\ncomponent tree의 상위를 탐색하여 파악할 수 있다.\r\n그 결과, bug를 쉽게 발견하여 고칠 수 있다.</p>","excerpt":"React 데이터 흐름 페이지를 만들기 이전에, 컴포넌트를 먼저 만들고 조립한다. 상향식으로 앱을 만들면 테스트가 쉽고 확장성이 좋다. 단방향 데이터 흐름(one-way data flow) 상태를 최소화하는 것이 가장 좋으며, Lifting state / 하향식 데이터 흐름(Top-down data flow) 보통 state는 rendering을 위해서 component에 추가되는데,\r\n만약 다른 component도 함께 state를 필요로하면\r\n그 component들의 공통된 부모 component로 state를 끌어올린다. 부모 component에서 관리하게 되는것이다. 이것이 하향식 데이터 흐름를 활용하는 방법이다. 장점 :\r\nbug가 줄고, 관리하는 로직 수정이 쉬움. 📍 만약 UI에서 잘못된 값이 render 된 부분을 발견한다면\r\n해당 data, 즉 props가 어떠한 부모 component로부터 왔는지\r\ncomponent tree의 상위를 탐색하여 파악할 수 있다.\r\n…","frontmatter":{"date":"August 09, 2022","title":"[8주차] React lifting state up - 2일차","categories":"codestates blog","author":"김예린","emoji":null},"fields":{"slug":"/2022-08-09/"}},"next":{"id":"9c8a079a-e986-5142-b219-f7c56a27542a","html":"<p>유투브에서 우연히 영상을 보았다.\r\n직접 server와 client 간의 데이터를 주고받는 법을 배울 수 있었다.</p>\n<h3 id=\"server-파일과-client-파일-생성\" style=\"position:relative;\"><a href=\"#server-%ED%8C%8C%EC%9D%BC%EA%B3%BC-client-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"server 파일과 client 파일 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>server 파일과 client 파일 생성</h3>\n<h4 id=\"server-파일\" style=\"position:relative;\"><a href=\"#server-%ED%8C%8C%EC%9D%BC\" aria-label=\"server 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>server 파일</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i express</code></pre></div>\n<p>pacakage.json 파일이 생성된다.</p>\n<p>✔️ <strong>서버 실행</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node app.js</code></pre></div>\n<h4 id=\"client-파일\" style=\"position:relative;\"><a href=\"#client-%ED%8C%8C%EC%9D%BC\" aria-label=\"client 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client 파일</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx create-react-app . //해당 디렉토리에 설치</code></pre></div>\n<p>✔️ <strong>react 실행화면 보기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm start</code></pre></div>\n<br>\n<h3 id=\"cors\" style=\"position:relative;\"><a href=\"#cors\" aria-label=\"cors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS</h3>\n<p>실제로 데이터베이스가 없을 때 직접 서버를 구축하고 postman을 통해서 데이터를 어떻게 주고 받는지 알 수 있었다.</p>\n<p>중간에 server와 client 포트가 달라서 ccess-Control-Allow-Origin 헤더가 요청된 리소스에 없다면서 CORS 정책을 위반해서 나온 에러가 떴다.</p>\n<p><strong>CORS 정책을 위반하여 서로 다른 출처를 가진 상태에서 무언가를 요청하게 되면 브라우저가 보안 상의 이유로 차단을 해버린다!</strong></p>\n<h4 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결:</h4>\n<p><strong>CORS 미들웨어 사용하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!-- app.js -->\r\n\r\nvar cors = require('cors')\r\n\r\napp.use(cors())</code></pre></div>\n<p>위 코드를 추가해주면 된다.</p>\n<p>📍 하지만, app.use(cors()) 이런 식으로 하게 되면 모든 출처에서 오는 요청을 허용하는 것이므로 지양하자.</p>\n<br>\n<blockquote>\n<h3 id=\"마무리-\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC-\" aria-label=\"마무리  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리 👀</h3>\n</blockquote>\n<p>지금까지 배운 교육과정을 통틀어 사용할 수 있어서 유익한 시간이었다.</p>\n<p>직접 스스로 서버를 구축하고, react로 웹사이트를 디자인하면서 fetch, useState, useEffect, map 함수, css 속성 등을 익숙하게 다룰 수 있을 것 같다.</p>\n<h4 id=\"0811-\" style=\"position:relative;\"><a href=\"#0811-\" aria-label=\"0811  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>08.11 )</h4>\n<p>실제로 오늘 교육과정에서 CORS에 대해 배웠다. node.js HTTP 모듈을 이용해보고, Express로도 요청/응답을 실행해보았다.</p>\n<p>자세한 내용은 <a href=\"https://yelinz515.github.io/2022-08-11/\">[8주차] [Web Server] 기초 - 4일차</a> 를 참고하면 된다.</p>","frontmatter":{"date":"August 08, 2022","title":"프론트에서 서버에 데이터 요청하기","categories":"study blog","author":"김예린","emoji":null},"fields":{"slug":"/study_review_server/server_request/"}},"prev":{"id":"2c5a14db-5c3e-54d2-aed1-8c2372d0d6df","html":"<h2 id=\"states-airline-시작하기\" style=\"position:relative;\"><a href=\"#states-airline-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"states airline 시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>States Airline 시작하기</h2>\n<h3 id=\"useeffect\" style=\"position:relative;\"><a href=\"#useeffect\" aria-label=\"useeffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">useEffect(함수, []) // 처음만 실행</code></pre></div>\n<p><code class=\"language-text\">useEffect(함수)</code>\r\n두 번째 전달인자인 종속성이 없으면 첫번째 전달인자인 함수를 _______________ 실행한다.</p>\n<ul>\n<li>처음 컴포넌트가 생성될 때</li>\n<li>props가 변경될 때</li>\n<li>state가 변경될 때</li>\n</ul>\n<h3 id=\"promise\" style=\"position:relative;\"><a href=\"#promise\" aria-label=\"promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>promise</h3>\n<p>Promise <code class=\"language-text\">resolve()</code>에 있는 데이터를 접근하려면 <code class=\"language-text\">.then</code> 사용</p>\n<p>예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> aa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2 id=\"states-airline\" style=\"position:relative;\"><a href=\"#states-airline\" aria-label=\"states airline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>States Airline</h2>\n<h3 id=\"loadingindicatorjs\" style=\"position:relative;\"><a href=\"#loadingindicatorjs\" aria-label=\"loadingindicatorjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LoadingIndicator.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">LoadingIndicator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>img\r\n      className<span class=\"token operator\">=</span><span class=\"token string\">\"loading-indicator\"</span>\r\n      alt<span class=\"token operator\">=</span><span class=\"token string\">\"now loading...\"</span>\r\n      src<span class=\"token operator\">=</span><span class=\"token string\">\"loading.gif\"</span>\r\n      style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> margin<span class=\"token operator\">:</span> <span class=\"token string\">'1rem'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoadingIndicator<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">&lt;LoadingIndicator /></code> 라는 로딩 화면 구현은 사용자에게 중요하다. 개발자라면 이 부분에 대해서 관대해지면 안된다. 구현해 주는 것이 좋겠다.</p>\n<p><img src=\"/6ecec75d18c07727372352ecc77ad605/loading.gif\" alt=\"Chinese Salty Egg\"></p>\n<h3 id=\"mainjs\" style=\"position:relative;\"><a href=\"#mainjs\" aria-label=\"mainjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">getFlight</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token comment\">//condition으로 newPromise의 flitered를 사용한다.</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token function\">setFlightList</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span> <span class=\"token comment\">//filighlist에 데이터를 담고</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로딩 끄기</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>condition<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">.then</code> 밖에 <code class=\"language-text\">setIsLoading(false);</code> 선언되어 있는데 실행은 되지만 <code class=\"language-text\">.then</code>이 끝날 때까지 기다리지 않기 때문에 <code class=\"language-text\">setIsLoading(false);</code>을 바로 실행이 된다.</p>\n<p>그렇기 때문에 <code class=\"language-text\">setIsLoading(false);</code>을 <code class=\"language-text\">.then</code>안에 넣어줘야 하는 것이다.</p>\n<p><strong>Main.js</strong> 전체 코드는 이렇다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Head <span class=\"token keyword\">from</span> <span class=\"token string\">'next/head'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getFlight <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../api/FlightDataApi'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> FlightList <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/FlightList'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> LoadingIndicator <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/LoadingIndicator'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> Search <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/Search'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> Debug <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/Debug'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// 후반 테스트를 진행할 때 아래 import를 삭제합니다.</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// 항공편 검색 조건을 담고 있는 상태</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>condition<span class=\"token punctuation\">,</span> setCondition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    departure<span class=\"token operator\">:</span> <span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>flightList<span class=\"token punctuation\">,</span> setFlightList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// 주어진 검색 키워드에 따라 condition 상태를 변경시켜주는 함수</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> departure<span class=\"token punctuation\">,</span> destination <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\r\n      condition<span class=\"token punctuation\">.</span>departure <span class=\"token operator\">!==</span> departure <span class=\"token operator\">||</span>\r\n      condition<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">!==</span> destination\r\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'condition 상태를 변경시킵니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n      <span class=\"token comment\">// TODO: search 함수가 전달 받아온 '항공편 검색 조건' 인자를 condition 상태에 적절하게 담아보세요.</span>\r\n      <span class=\"token function\">setCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>departure<span class=\"token punctuation\">,</span> destination<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterByCondition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">flight</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> pass <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      pass <span class=\"token operator\">=</span> pass <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>departure <span class=\"token operator\">===</span> condition<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      pass <span class=\"token operator\">=</span> pass <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">===</span> condition<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">return</span> pass<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  global<span class=\"token punctuation\">.</span>search <span class=\"token operator\">=</span> search<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행에는 전혀 지장이 없지만, 테스트를 위해 필요한 코드입니다. 이 코드는 지우지 마세요!</span>\r\n\r\n  <span class=\"token comment\">// TODO: Effeck Hook을 이용해 AJAX 요청을 보내보세요.</span>\r\n  <span class=\"token comment\">// TODO: 더불어, 네트워크 요청이 진행됨을 보여주는 로딩 컴포넌트(&lt;LoadingIndicator/>)를 제공해보세요.</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">getFlight</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token comment\">//condition으로 newPromise의 flitered를 사용한다.</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token function\">setFlightList</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span> <span class=\"token comment\">//filighlist에 데이터를 담고</span>\r\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로딩 끄기</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>condition<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token comment\">// TODO: 테스트 케이스의 지시에 따라 search 함수를 Search 컴포넌트로 내려주세요.</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>Head<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>States Airline<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"icon\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/favicon.ico\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Head<span class=\"token operator\">></span>\r\n\r\n      <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>여행가고 싶을 땐<span class=\"token punctuation\">,</span> States Airline<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>Search onSearch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>search<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"table\"</span><span class=\"token operator\">></span>\r\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"row-header\"</span><span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>출발<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>도착<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>출발 시각<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>도착 시각<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n          <span class=\"token punctuation\">{</span><span class=\"token comment\">/* &lt;FlightList list={flightList.filter(filterByCondition)} /> */</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token punctuation\">{</span>isLoading <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>LoadingIndicator <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>FlightList list<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>flightList<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n\r\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"debug-area\"</span><span class=\"token operator\">></span>\r\n          <span class=\"token operator\">&lt;</span>Debug condition<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>condition<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>img id<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"codestates-logo.png\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"flightdataapijs\" style=\"position:relative;\"><a href=\"#flightdataapijs\" aria-label=\"flightdataapijs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FlightDataApi.js</h3>\n<p><strong>Main.js</strong>를 보면 <code class=\"language-text\">getFlight(condition)</code>는 아래와 같이 <strong>FlightDataApi.js</strong>에 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getFlight <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../api/FlightDataApi'</span></code></pre></div>\n<h3 id=\"flightdataapijs-1\" style=\"position:relative;\"><a href=\"#flightdataapijs-1\" aria-label=\"flightdataapijs 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FlightDataApi.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> flightList <span class=\"token keyword\">from</span> <span class=\"token string\">'../resource/flightList'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> fetch <span class=\"token keyword\">from</span> <span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// localStorage'에 정보를 저장</span>\r\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flight'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>flightList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// filterBy = ()는 디폴트 값</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFlight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filterBy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// HINT: 가장 마지막 테스트를 통과하기 위해, fetch를 이용합니다. 아래 구현은 완전히 삭제되어도 상관없습니다.</span>\r\n  <span class=\"token comment\">// TODO: 아래 구현을 REST API 호출로 대체하세요.</span>\r\n\r\n  <span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    json <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flight'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">const</span> flight <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">//filtered 배열이다</span>\r\n    <span class=\"token keyword\">const</span> filtered <span class=\"token operator\">=</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flight</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">let</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        condition <span class=\"token operator\">=</span> condition <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>departure <span class=\"token operator\">===</span> filterBy<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span>\r\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        condition <span class=\"token operator\">=</span> condition <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">===</span> filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span>\r\n      <span class=\"token keyword\">return</span> condition<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>filtered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<p>위 코드를 보면 우리는 <strong>flightList.js</strong>에서 데이터를 가져오고 있다.</p>\n<br>\n<p><strong>이제 하드코딩 된 flightList JSON을 사용하지 않고\r\nREST API를 호출해 똑같이 실행해보겠다.</strong></p>\n<h4 id=\"1\" style=\"position:relative;\"><a href=\"#1\" aria-label=\"1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.</h4>\n<p>내가 써 본 방법은 두 가지 이다.</p>\n<p>첫번째로는 어차피 출발지는 <code class=\"language-text\">ICN</code>으로 고정되어 있기 때문에 destination만 검색해도 결과값을 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// 1.</span>\r\n  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://ec2-13-124-90-231.ap-northeast-2.compute.amazonaws.com:81/flight?departure=ICN</span><span class=\"token template-punctuation string\">`</span></span>\r\n  \r\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    url <span class=\"token operator\">=</span> url <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;destination=\"</span> <span class=\"token operator\">+</span> filterBy<span class=\"token punctuation\">.</span>destination\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>기존 endpoint에서 출발지를 추가해서 변수 <code class=\"language-text\">url</code>을 만들고, 조건문으로 도착지를 추가해주면 된다.</p>\n<p>마지막에 StatesAirline 서버에서 항공편 정보를 요청(fetch)을 하면 된다.</p>\n<h4 id=\"2\" style=\"position:relative;\"><a href=\"#2\" aria-label=\"2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">//2</span>\r\n  <span class=\"token keyword\">let</span> emstring <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    emstring <span class=\"token operator\">=</span> emstring <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">departure=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filterBy<span class=\"token punctuation\">.</span>departure<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;</span><span class=\"token template-punctuation string\">`</span></span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    emstring <span class=\"token operator\">=</span> emstring <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">destination=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://ec2-13-124-90-231.ap-northeast-2.compute.amazonaws.com:81/flight?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>emstring<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\r\n  \r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>1.</strong> 보다 더 복잡하다.\r\n<code class=\"language-text\">emstring</code>이라는 빈 문자열에 출발지와 도착지를 추가하면 된다.</p>\n<p>그리고 <code class=\"language-text\">url</code> 변수에 출발지와 도착지를 넣은 <code class=\"language-text\">emstring</code>를 추가하면 된다.</p>\n<p>마지막은 똑같이 StatesAirline 서버에서 항공편 정보를 요청(fetch)하면 된다.</p>\n<p><strong>Main.js</strong>에서 <code class=\"language-text\">useEffect()</code>를 사용한 이유이다.</p>","frontmatter":{"date":"August 10, 2022","title":"States Airline","categories":"codestates blog","author":"김예린","emoji":null},"fields":{"slug":"/2022-08-10/"}},"site":{"siteMetadata":{"siteUrl":"https://yelinz515.github.io","comments":{"utterances":{"repo":"yelinz515/blog-comments"}}}}},"pageContext":{"slug":"/2022-08-09/","nextSlug":"/study_review_server/server_request/","prevSlug":"/2022-08-10/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}